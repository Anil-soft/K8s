📌 What Are Logs?
Logs are detailed, textual records of events or activities generated by an application, service, or system. They provide contextual and chronological information about what happened at a specific moment. Logs are typically unstructured or semi-structured text.

🔹 Key Characteristics of Logs
✔ Granular Detail – Each log entry captures a specific event.
✔ Chronological – Logs record events in the order they occur.

🔹 Examples of Logs
📌 Web Server Logs
📄 Log Message:
2024-12-17T10:15:00Z INFO 200 GET /api/v1/users
🔹 Describes a successful HTTP GET request to the /api/v1/users endpoint.

📌 Application Logs
📄 Log Message:
2024-12-17T10:16:45Z ERROR Unable to connect to database: Connection timed out
🔹 Indicates an error when attempting to connect to a database.

📌 What Are Metrics?
Metrics are quantitative measurements that provide a real-time, numerical summary of the state or performance of a system, application, or infrastructure. Metrics are structured and lightweight.

🔹 Key Characteristics of Metrics
✔ Numerical and Structured – Expressed as numbers.
✔ Aggregated – Represent summaries like averages, counts, or rates.

🔹 Examples of Metrics
📌 CPU Usage
🖥 Metric Name: cpu_utilization
📊 Value: 75%
🔹 Tracks how much CPU is being utilized.

📌 Request Latency
⏳ Metric Name: http_request_duration_seconds
📊 Value: 0.250s
🔹 Measures the time taken to handle an HTTP request.

📌 Error Rate
🚨 Metric Name: http_5xx_errors_total
📊 Value: 15
🔹 Counts the total number of 5xx server errors.

📌 Key Differences Between Logs and Metrics
🔹 Logs:
Unstructured or semi-structured textual data.
Provides detailed context for troubleshooting.
Used for debugging issues, auditing, and event correlation.
🔹 Metrics:
Structured, numerical data.
Tracks performance trends and system health over time.
Used for real-time monitoring, alerting, and capacity planning.

📌 How They Work Together
✅ Metrics Alert You – Show anomalies (e.g., high error rates, latency).
✅ Logs Explain Why – Provide detailed insights to debug and fix the issue.

1️⃣ What is Node Exporter?
🔹 Node Exporter is used to collect system-level metrics such as:
CPU, memory, disk, network usage
Filesystem statistics
System load, I/O operations
📌 It runs as a DaemonSet, meaning it is deployed on every node in the cluster.

2️⃣ What is Kube State Metrics?
🔹 Kube State Metrics is used to collect Kubernetes object-level metrics such as:
Pod, Deployment, ReplicaSet statuses
Node status & conditions
Resource requests/limits
PersistentVolume statuses
📌 It provides metrics only about Kubernetes resources, not system metrics.

3️⃣ Deployment in Kubernetes
📌 Deploying Node Exporter
Since Node Exporter collects node-level metrics, it should be deployed as a DaemonSet.

📌 node-exporter.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: node-exporter
  namespace: monitoring
spec:
  selector:
    matchLabels:
      app: node-exporter
  template:
    metadata:
      labels:
        app: node-exporter
    spec:
      containers:
      - name: node-exporter
        image: prom/node-exporter:latest
        ports:
        - containerPort: 9100
          hostPort: 9100
📌 How it Works?
Runs on every node.
Exposes metrics on http://<node-ip>:9100/metrics.
Metrics include CPU, memory, disk, and system health.

📌 Deploying Kube State Metrics
Kube State Metrics is deployed as a Deployment.
📌 kube-state-metrics.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kube-state-metrics
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kube-state-metrics
  template:
    metadata:
      labels:
        app: kube-state-metrics
    spec:
      containers:
      - name: kube-state-metrics
        image: quay.io/coreos/kube-state-metrics:latest
        ports:
        - containerPort: 8080
📌 How it Works?
Runs as a single instance.
Exposes metrics on http://<pod-ip>:8080/metrics.
Provides Kubernetes object metrics (Pods, Deployments, Nodes, etc.)

4️⃣ How Prometheus Scrapes Metrics?
🔹 Prometheus scrapes metrics from:
Node Exporter (http://node-exporter:9100/metrics)
Kube State Metrics (http://kube-state-metrics:8080/metrics)
📌 prometheus-config.yaml
scrape_configs:
  - job_name: 'node-exporter'
    static_configs:
      - targets: ['node-exporter:9100']

  - job_name: 'kube-state-metrics'
    static_configs:
      - targets: ['kube-state-metrics:8080']
📌 How it Works?5️⃣ Storing & Visualizing Metrics
📌 Storage in Prometheus

Stored in Prometheus’s time-series database (TSDB).
Data retention depends on Prometheus configuration.
📌 Visualizing in Grafana
Grafana queries Prometheus as a data source.
Dashboards are created for Node metrics & Kubernetes metrics.
Prometheus queries both exporters every few seconds.
Stores the metrics in time-series format.
Grafana can visualize these metrics.

✅ Check Node Exporter metrics
curl http://<node-ip>:9100/metrics

✅ Check Kube State Metrics
kubectl port-forward svc/kube-state-metrics 8080:8080 -n monitoring
curl http://localhost:8080/metrics

1️⃣ Create a ConfigMap for Prometheus Configuration
The best practice is to store the Prometheus configuration inside a Kubernetes ConfigMap.

📌 Create prometheus-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s

    scrape_configs:
      - job_name: 'node-exporter'
        static_configs:
          - targets: ['node-exporter:9100']

      - job_name: 'kube-state-metrics'
        static_configs:
          - targets: ['kube-state-metrics:8080']

2️⃣ Mount the ConfigMap Inside the Prometheus Deployment
After creating the ConfigMap, we need to mount it inside the Prometheus Deployment.

📌 Modify Prometheus Deployment to Use the ConfigMap
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus:latest
        args:
          - "--config.file=/etc/prometheus/prometheus.yml"
        volumeMounts:
          - name: prometheus-config
            mountPath: /etc/prometheus
            subPath: prometheus.yml
      volumes:
        - name: prometheus-config
          configMap:
            name: prometheus-config

How node-exporter and kube-state-metrics Collect Metrics?
Both node-exporter and kube-state-metrics are Prometheus exporters that collect different types of metrics from a Kubernetes cluster.

1️⃣ How node-exporter Collects Metrics
📌 What it does?

Runs on every Kubernetes Node as a DaemonSet.
Fetches system-level metrics like:
CPU usage
Memory consumption
Disk I/O
Network statistics
📌 How it works?

node-exporter runs as a containerized agent on each node.
It collects system metrics by reading /proc and /sys files inside the node.
The metrics are exposed at http://<node-ip>:9100/metrics
Prometheus scrapes these metrics by hitting the /metrics endpoint.

📌 Deploy node-exporter DaemonSet
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: node-exporter
  namespace: monitoring
spec:
  selector:
    matchLabels:
      app: node-exporter
  template:
    metadata:
      labels:
        app: node-exporter
    spec:
      containers:
      - name: node-exporter
        image: prom/node-exporter:latest
        ports:
        - containerPort: 9100

2️⃣ How kube-state-metrics Collects Metrics
📌 What it does?

Does not collect system metrics like CPU/memory.
Instead, it gathers Kubernetes object status:
Number of running Pods
Deployment replicas
Node conditions (Ready/NotReady)
Persistent Volume status

📌 How it works?
kube-state-metrics connects to the Kubernetes API server.
It fetches metadata and status of cluster objects (Pods, Deployments, Nodes, etc.).
The metrics are exposed at http://<kube-state-metrics-IP>:8080/metrics
Prometheus scrapes these metrics from this endpoint.
📌 Deploy kube-state-metrics
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kube-state-metrics
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kube-state-metrics
  template:
    metadata:
      labels:
        app: kube-state-metrics
    spec:
      containers:
      - name: kube-state-metrics
        image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.5.0
        ports:
        - containerPort: 8080



























