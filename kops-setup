Setting up Multi-Cluster Kubernetes on AWS EC2 using Kops
Overview
This guide provides a step-by-step approach to setting up a multi-cluster Kubernetes environment on AWS EC2 instances using Kops. Kops (Kubernetes Operations) is a powerful tool for provisioning, managing, and scaling Kubernetes clusters on AWS.
________________________________________
1. Prerequisites
‚úÖ AWS Requirements
‚Ä¢	AWS CLI installed and configured
‚Ä¢	IAM user with necessary permissions
‚Ä¢	Route 53 hosted zone for cluster domain
‚Ä¢	S3 bucket for Kops state storage
‚úÖ Local Machine Setup
‚Ä¢	Install Kops & kubectl
‚Ä¢	Configure AWS CLI
‚Ä¢	Set up SSH keys
________________________________________
2Ô∏è.Installing Kops & kubectl
# Install Kops
curl -LO https://github.com/kubernetes/kops/releases/latest/download/kops-linux-amd64
chmod +x kops-linux-amd64
sudo mv kops-linux-amd64 /usr/local/bin/kops

# Install kubectl
curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
chmod +x kubectl
sudo mv kubectl /usr/local/bin/kubectl
________________________________________

3Ô∏è.Setting Up Kops State Storage
export KOPS_STATE_STORE=s3://my-kops-state-store
aws s3api create-bucket --bucket my-kops-state-store --region us-east-1
________________________________________
4Ô∏è.Creating a Kubernetes Cluster
kops create cluster --name=k8s.example.com \
  --state=$KOPS_STATE_STORE \
  --zones=us-east-1a,us-east-1b \
  --node-count=3 \
  --node-size=t3.medium \
  --master-size=t3.medium \
  --dns-zone=k8s.example.com \
  --yes
________________________________________
5Ô∏è.Verifying Cluster Status
kops validate cluster --state=$KOPS_STATE_STORE
kubectl get nodes
________________________________________
6Ô∏è.Managing Multiple Clusters
To manage multiple clusters, specify different cluster names:
export KOPS_STATE_STORE=s3://my-kops-state-store
kops create cluster --name=dev.k8s.example.com --zones=us-west-2a --yes
kops create cluster --name=prod.k8s.example.com --zones=us-east-1a --yes
________________________________________
7Ô∏è.Scaling & Deleting Clusters
Scale Nodes:
kops edit ig nodes --name=k8s.example.com
kops update cluster k8s.example.com --yes

Delete Cluster:
kops delete cluster --name=k8s.example.com --state=$KOPS_STATE_STORE --yes
________________________________________



Conclusion
Kops simplifies multi-cluster Kubernetes deployments on AWS, providing automated provisioning, scaling, and management. With the right setup, it becomes easier to maintain isolated environments for different applications.
üîπ Best Practices:
‚Ä¢	Use different S3 buckets for each environment
‚Ä¢	Enable cluster backups using Velero
‚Ä¢	Use Terraform with Kops for IaC


Ansible playbook to setup kubekops

---
- name: Create Kubernetes Cluster with Kops
  hosts: localhost
  become: yes
  vars_files:
    - vars.yml

  tasks:
  
    - name: Install AWS CLI, Kops, and Kubectl
      apt:
        name:
          - awscli
          - unzip
        state: present

    - name: Download and Install Kops
      get_url:
        url: "https://github.com/kubernetes/kops/releases/latest/download/kops-linux-amd64"
        dest: "/usr/local/bin/kops"
        mode: '0755'

    - name: Download and Install Kubectl
      get_url:
        url: "https://dl.k8s.io/release/v1.28.0/bin/linux/amd64/kubectl"
        dest: "/usr/local/bin/kubectl"
        mode: '0755'

    - name: Create an S3 bucket for Kops state store
      shell: |
        aws s3api create-bucket --bucket {{ s3_bucket }} --region {{ aws_region }} --create-bucket-configuration LocationConstraint={{ aws_region }}

    - name: Enable versioning on S3 bucket
      shell: aws s3api put-bucket-versioning --bucket {{ s3_bucket }} --versioning-configuration Status=Enabled

    - name: Set Kops State Store Environment Variable
      lineinfile:
        path: ~/.bashrc
        line: "export KOPS_STATE_STORE=s3://{{ s3_bucket }}"
        create: yes

    - name: Create the Kubernetes Cluster Configuration
      shell: |
        export KOPS_STATE_STORE=s3://{{ s3_bucket }}
        kops create cluster \
          --name={{ cluster_name }} \
          --state=s3://{{ s3_bucket }} \
          --zones={{ aws_region }}a \
          --node-count={{ node_count }} \
          --node-size={{ node_size }} \
          --master-size={{ master_size }} \
          --dns-zone={{ dns_zone }}

    - name: Apply the Kops Cluster Configuration
      shell: |
        export KOPS_STATE_STORE=s3://{{ s3_bucket }}
        kops update cluster --name={{ cluster_name }} --yes

    - name: Validate the Cluster
      shell: |
        export KOPS_STATE_STORE=s3://{{ s3_bucket }}
        kops validate cluster
      register: cluster_status

    - debug:
        var: cluster_status.stdout_lines
