üîí How to Secure Your Kubernetes Application?
Securing a Kubernetes application requires multiple layers of security, including network policies, role-based access control (RBAC), 
secret management, and runtime security. Here‚Äôs a step-by-step approach to harden your Kubernetes applications.

1Ô∏è‚É£ Network Security
‚úÖ Use Network Policies
By default, Pods can communicate with any other Pod in the cluster. To restrict communication, use Network Policies.

Example: Allow only specific Pods to communicate
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-app-to-db
spec:
  podSelector:
    matchLabels:
      app: database
  policyTypes:
    - Ingress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app: backend
üîπ This policy allows only backend Pods to talk to the database Pod.

‚úÖ Restrict External Access
Use ClusterIP instead of NodePort or LoadBalancer unless external access is required.
Use an Ingress Controller (e.g., NGINX, Traefik) with TLS termination.

Example: Enforce HTTPS with TLS in NGINX Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: secure-ingress
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  tls:
    - hosts:
        - myapp.example.com
      secretName: myapp-tls
  rules:
    - host: myapp.example.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: myapp-service
                port:
                  number: 443
üîπ This ensures that only HTTPS traffic is allowed.

2Ô∏è‚É£ Identity & Access Management
‚úÖ Use RBAC (Role-Based Access Control)
Restrict access to Kubernetes resources using RBAC.

Example: Allow only read-only access to Pods
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: pod-reader
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: read-only-binding
subjects:
  - kind: User
    name: dev-user
    apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role
  name: pod-reader
  apiGroup: rbac.authorization.k8s.io

üîπ This ensures that dev-user can only read Pods but not modify them.

‚úÖ Use Service Accounts for Applications
Avoid running applications as the default service account.

Example: Create a service account for an application
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-app-sa
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-app
spec:
  template:
    spec:
      serviceAccountName: my-app-sa

3Ô∏è‚É£ Secrets & Configuration Management
‚úÖ Store Secrets Securely
Avoid storing passwords in environment variables or YAML files. Use Kubernetes Secrets.

Example: Creating a Kubernetes Secret
kubectl create secret generic db-credentials \
  --from-literal=username=admin \
  --from-literal=password=supersecure

env:
  - name: DB_USERNAME
    valueFrom:
      secretKeyRef:
        name: db-credentials
        key: username
  - name: DB_PASSWORD
    valueFrom:
      secretKeyRef:
        name: db-credentials
        key: password
4Ô∏è‚É£ Pod & Container Security
‚úÖ Run Containers as Non-Root
By default, many containers run as root, which is a security risk.

Example: Force Pods to run as a non-root user

‚úÖ Use Image Scanning & Signed Images
Scan container images for vulnerabilities using tools like:
Trivy (trivy image my-app:latest)
Anchore
Clair
Use signed and trusted images from registries (e.g., Docker Content Trust (DCT)).

‚úÖ Enable Resource Limits
Set CPU & memory limits to prevent resource exhaustion (DDoS attacks).

Example: Apply resource limits
resources:
  requests:
    cpu: "500m"
    memory: "256Mi"
  limits:
    cpu: "1000m"
    memory: "512Mi"
üîπ Prevents Pods from consuming excessive resources.

